package shinobi.arch.read_it.Post;

import android.net.Uri;
import android.support.annotation.NonNull;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.io.File;
import java.util.ArrayList;

import shinobi.arch.read_it.User.User;

/**
 * Post Class
 * Representation of a Post
 * Created by architgupta on 4/18/17.
 */

public class Post {
    private String title;
    private User author;
    private String content;
    private ArrayList<Comment> comments;
    private String imgUrl;
    private int upVotes;
    private int downVotes;

    /**
     * Default Constructor
     */
    public Post() {
    }

    /**
     * Parameterized Constructor
     *
     * @param title   String, Title of the Movie
     * @param author  User, Author of the Post
     * @param imgPath String, Image Path
     */
    public Post(String title, User author, String imgPath) {
        this.title = title;
        this.author = author;
        this.upVotes = 0;
        this.downVotes = 0;
        this.imgUrl = createImageUrl(imgPath);
        this.comments = new ArrayList<>();
        author.addPost(this);
    }

    /**
     * Update Upvote Count for Post and User
     */
    public void upVote() {
        upVotes++;
        author.upVote();
    }

    /**
     * Update Downvote count for Post and User
     */
    public void downVote() {
        Post oldPost = this;
        downVotes++;
        author.downVote();
        author.updatePost(oldPost, this);
    }

    /**
     * Remove a previous up-vote
     */
    public void removeUpVote() {
        if (upVotes > 0) {
            Post oldPost = this;
            upVotes--;
            author.removeUpVote();
            author.updatePost(oldPost, this);
        }
    }

    /**
     * Remove a previous down-vote
     */
    public void removeDownVote() {
        if (downVotes > 0) {
            Post oldPost = this;
            downVotes--;
            author.removeDownVote();
            author.updatePost(oldPost, this);
        }
    }

    /**
     * Upload Image to Firebase and get a URL to access it
     *
     * @param filePath local path of the file
     * @return image url (string)
     */
    public String createImageUrl(String filePath) {
        Uri file = Uri.fromFile(new File(filePath));
        StorageReference storageRef = FirebaseStorage.getInstance().getReference();
        StorageReference riversRef = storageRef.child("images/rivers.jpg");
        final String[] url = {""};

        riversRef.putFile(file)
                .addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                        // Get a URL to the uploaded content
                        @SuppressWarnings("VisibleForTests")
                        Uri downloadUrl = taskSnapshot.getDownloadUrl();
                        url[0] = downloadUrl.toString();
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception exception) {

                    }
                });
        return url[0];
    }

    /**
     * Getters, Setters, Equals and Hashcode
     */
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        Post oldPost = this;
        this.title = title;
        author.updatePost(oldPost, this);
    }

    public User getAuthor() {
        return author;
    }

    public void setAuthor(User author) {
        Post oldPost = this;
        this.author = author;
        author.updatePost(oldPost, this);

    }

    public ArrayList<Comment> getComments() {
        return comments;
    }

    public void setComments(ArrayList<Comment> comments) {
        Post oldPost = this;
        this.comments = comments;
        author.updatePost(oldPost, this);

    }

    public void setContent(String newContent) {
        Post oldPost = this;
        this.content = newContent;
        author.updatePost(oldPost, this);
    }

    public String getImageUrl() {
        return imgUrl;
    }

    public void setImg_url(String img_url) {
        Post oldPost = this;
        this.imgUrl = img_url;
        author.updatePost(oldPost, this);
    }

    public String getContent() {
        return this.content;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Post post = (Post) o;

        if (upVotes != post.upVotes) return false;
        if (downVotes != post.downVotes) return false;
        if (!title.equals(post.title)) return false;
        if (!author.equals(post.author)) return false;
        if (!comments.equals(post.comments)) return false;
        return imgUrl.equals(post.imgUrl);

    }

    @Override
    public int hashCode() {
        int result = title.hashCode();
        result = 31 * result + author.hashCode();
        result = 31 * result + comments.hashCode();
        result = 31 * result + imgUrl.hashCode();
        result = 31 * result + upVotes;
        result = 31 * result + downVotes;
        return result;
    }
}

